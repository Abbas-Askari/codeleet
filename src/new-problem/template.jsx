import { javascript } from "@codemirror/lang-javascript";
import { vscodeDark } from "@uiw/codemirror-theme-vscode";
import ReactCodeMirror from "@uiw/react-codemirror";
import React, { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  setCustomTemplate,
  updateTemplate,
  validateTemplate,
} from "./new-problem-slice";

function Template() {
  const dispatch = useDispatch();
  const { template, params, functionName, customTemplate } = useSelector(
    (state) => state.newProblem
  );

  const paramsString = params.join(", ");
  console.log({ paramsString });
  const autoTemplate = `function ${functionName}(${paramsString}) {
  // Write your code here
}`;

  console.log({ template, autoTemplate, customTemplate });
  //   if (autoTemplate !== template && !customTemplate) {
  //     console.log("updating template");
  //     dispatch(updateTemplate(autoTemplate));
  //   }

  // const isValid =
  //   template.includes(functionName) &&
  //   params.every((p) => template.includes(p));

  const validationError = validateTemplate(template, params, functionName);
  console.log({ validationError });

  return (
    <div className="min-h-96 self-stretch text-lg flex flex-col w-full h-full gap-2 justify-between rounded-lg overflow-hidden">
      <div className="bg-base-200  text-lg font-semibold flex items-center justify-between">
        <div className="">
          Template{" "}
          <span
            className={` mt-2 font-normal self-center text-error text-xs opacity-0 ${validationError ? "opacity-100" : ""
              } transition-opacity`}
          >
            Template is not valid. {validationError}
          </span>
        </div>
        <button
          type="button"
          onClick={() => document.getElementById("template-help").showModal()}
          className="btn bg-warning btn-xs btn-circle  text-warning-content "
        >
          ?
        </button>
        <TemplateHelp />
      </div>

      <div className="min-h-96 text-lg  rounded-lg overflow-hidden">
        <ReactCodeMirror
          value={template}
          onChange={(value) => {
            dispatch(updateTemplate(value));
          }}
          readOnly={!customTemplate}
          className={` flex-1 overflow-auto rounded-lg ${validationError ? "border-error" : ""
            }`}
          theme={vscodeDark}
          height="24rem"
          extensions={[javascript()]}
        />
      </div>


      <div className="join w-full bg-inherit p-0">
        <input
          className="join-item btn w-1/2 border-primary border-2 text-primary duration-150"
          type="radio"
          defaultChecked
          name="options"
          aria-label="Auto Generated"
          onChange={(e) => {
            dispatch(setCustomTemplate(!e.target.checked));
            console.log(e.target.checked);
            if (e.target.checked) {
              dispatch(updateTemplate(autoTemplate));
            }
          }}
        />
        <input
          className="join-item btn w-1/2 border-primary border-2 text-primary duration-150"
          type="radio"
          name="options"
          aria-label="Custom"
          onChange={(e) => {
            dispatch(setCustomTemplate(e.target.checked));
            console.log(e.target.checked);
            if (!e.target.checked) {
              dispatch(updateTemplate(autoTemplate));
            }
          }}
        />
      </div>
    </div>
  );
}

function TemplateHelp() {
  return (
    <dialog id="template-help" className="modal">
      <div className="modal-box w-fit">
        <h3 className="font-bold text-lg flex items-center justify-between text-info">
          Template Help
          <form method="dialog">
            {/* if there is a button in form, it will close the modal */}
            <button className="btn btn-circle btn-xs">x</button>
          </form>
        </h3>

        <div className="">
          <div className="font-normal text-sm text-pretty">
            <p className=" mt-1">
              The template is the starting code that is provided to the user.
              The user can modify the template to solve the problem.
            </p>
            <p className=" mt-1">
              The template must contain the function with the name provided in
              the <code className="font-semibold">functionName</code> field and
              all the and all the parameters.
            </p>
            <p className=" mt-1">
              The template can be auto generated by clicking the{" "}
              <code className="font-semibold">Auto Generated</code> button. Or
              you can write your own template by clicking the{" "}
              <code className="font-semibold">Custom</code> button.
            </p>
            <p className=" mt-1">
              The template must also contain{" "}
              <code className="font-semibold">return</code> statement.
            </p>
          </div>
        </div>
      </div>
    </dialog>
  );
}

export default Template;
